// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: words.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createWord = `-- name: CreateWord :one
INSERT INTO words (
    malay,
    jawi,
    english,
    parts
) VALUES (
    $1, $2, $3, $4
) RETURNING id, malay, jawi, english, parts, created_at, updated_at
`

type CreateWordParams struct {
	Malay   string `json:"malay"`
	Jawi    string `json:"jawi"`
	English string `json:"english"`
	Parts   []byte `json:"parts"`
}

func (q *Queries) CreateWord(ctx context.Context, arg CreateWordParams) (Word, error) {
	row := q.db.QueryRow(ctx, createWord,
		arg.Malay,
		arg.Jawi,
		arg.English,
		arg.Parts,
	)
	var i Word
	err := row.Scan(
		&i.ID,
		&i.Malay,
		&i.Jawi,
		&i.English,
		&i.Parts,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteWord = `-- name: DeleteWord :exec
DELETE FROM words
WHERE id = $1
`

func (q *Queries) DeleteWord(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteWord, id)
	return err
}

const getWord = `-- name: GetWord :one
SELECT id, malay, jawi, english, parts, created_at, updated_at FROM words
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetWord(ctx context.Context, id int32) (Word, error) {
	row := q.db.QueryRow(ctx, getWord, id)
	var i Word
	err := row.Scan(
		&i.ID,
		&i.Malay,
		&i.Jawi,
		&i.English,
		&i.Parts,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getWordsByGroup = `-- name: GetWordsByGroup :many
SELECT w.id, w.malay, w.jawi, w.english, w.parts, w.created_at, w.updated_at FROM words w
JOIN word_groups wg ON w.id = wg.word_id
WHERE wg.group_id = $1
ORDER BY w.id
LIMIT $2 OFFSET $3
`

type GetWordsByGroupParams struct {
	GroupID int32 `json:"group_id"`
	Limit   int32 `json:"limit"`
	Offset  int32 `json:"offset"`
}

func (q *Queries) GetWordsByGroup(ctx context.Context, arg GetWordsByGroupParams) ([]Word, error) {
	rows, err := q.db.Query(ctx, getWordsByGroup, arg.GroupID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Word{}
	for rows.Next() {
		var i Word
		if err := rows.Scan(
			&i.ID,
			&i.Malay,
			&i.Jawi,
			&i.English,
			&i.Parts,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listWords = `-- name: ListWords :many
SELECT id, malay, jawi, english, parts, created_at, updated_at FROM words
WHERE 
    CASE 
        WHEN $1::text != '' THEN 
            malay ILIKE concat('%', $1::text, '%') OR
            english ILIKE concat('%', $1::text, '%')
        ELSE true
    END
ORDER BY id
LIMIT $3
OFFSET $2
`

type ListWordsParams struct {
	SearchQuery pgtype.Text `json:"search_query"`
	Offset      int32       `json:"offset"`
	Limit       int32       `json:"limit"`
}

func (q *Queries) ListWords(ctx context.Context, arg ListWordsParams) ([]Word, error) {
	rows, err := q.db.Query(ctx, listWords, arg.SearchQuery, arg.Offset, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Word{}
	for rows.Next() {
		var i Word
		if err := rows.Scan(
			&i.ID,
			&i.Malay,
			&i.Jawi,
			&i.English,
			&i.Parts,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const searchWords = `-- name: SearchWords :many
SELECT id, malay, jawi, english, parts, created_at, updated_at FROM words
WHERE 
    malay ILIKE $1 OR 
    english ILIKE $1
ORDER BY id
LIMIT $2 OFFSET $3
`

type SearchWordsParams struct {
	Malay  string `json:"malay"`
	Limit  int32  `json:"limit"`
	Offset int32  `json:"offset"`
}

func (q *Queries) SearchWords(ctx context.Context, arg SearchWordsParams) ([]Word, error) {
	rows, err := q.db.Query(ctx, searchWords, arg.Malay, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Word{}
	for rows.Next() {
		var i Word
		if err := rows.Scan(
			&i.ID,
			&i.Malay,
			&i.Jawi,
			&i.English,
			&i.Parts,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateWord = `-- name: UpdateWord :one
UPDATE words
SET 
    malay = COALESCE($2, malay),
    jawi = COALESCE($3, jawi),
    english = COALESCE($4, english),
    parts = COALESCE($5, parts),
    updated_at = CURRENT_TIMESTAMP
WHERE id = $1
RETURNING id, malay, jawi, english, parts, created_at, updated_at
`

type UpdateWordParams struct {
	ID      int32  `json:"id"`
	Malay   string `json:"malay"`
	Jawi    string `json:"jawi"`
	English string `json:"english"`
	Parts   []byte `json:"parts"`
}

func (q *Queries) UpdateWord(ctx context.Context, arg UpdateWordParams) (Word, error) {
	row := q.db.QueryRow(ctx, updateWord,
		arg.ID,
		arg.Malay,
		arg.Jawi,
		arg.English,
		arg.Parts,
	)
	var i Word
	err := row.Scan(
		&i.ID,
		&i.Malay,
		&i.Jawi,
		&i.English,
		&i.Parts,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
