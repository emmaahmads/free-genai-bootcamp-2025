// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: study_activities.sql

package db

import (
	"context"
)

const createStudyActivity = `-- name: CreateStudyActivity :one
INSERT INTO study_activities (
    name,
    url
) VALUES (
    $1, $2
) RETURNING id, name, url, created_at, updated_at
`

type CreateStudyActivityParams struct {
	Name string `json:"name"`
	Url  string `json:"url"`
}

func (q *Queries) CreateStudyActivity(ctx context.Context, arg CreateStudyActivityParams) (StudyActivity, error) {
	row := q.db.QueryRow(ctx, createStudyActivity, arg.Name, arg.Url)
	var i StudyActivity
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Url,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteStudyActivity = `-- name: DeleteStudyActivity :exec
DELETE FROM study_activities
WHERE id = $1
`

func (q *Queries) DeleteStudyActivity(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteStudyActivity, id)
	return err
}

const getStudyActivity = `-- name: GetStudyActivity :one
SELECT id, name, url, created_at, updated_at FROM study_activities
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetStudyActivity(ctx context.Context, id int32) (StudyActivity, error) {
	row := q.db.QueryRow(ctx, getStudyActivity, id)
	var i StudyActivity
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Url,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listStudyActivities = `-- name: ListStudyActivities :many
SELECT id, name, url, created_at, updated_at FROM study_activities
ORDER BY id
LIMIT $1 OFFSET $2
`

type ListStudyActivitiesParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListStudyActivities(ctx context.Context, arg ListStudyActivitiesParams) ([]StudyActivity, error) {
	rows, err := q.db.Query(ctx, listStudyActivities, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []StudyActivity{}
	for rows.Next() {
		var i StudyActivity
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Url,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateStudyActivity = `-- name: UpdateStudyActivity :one
UPDATE study_activities
SET 
    name = $2,
    url = $3,
    updated_at = CURRENT_TIMESTAMP
WHERE id = $1
RETURNING id, name, url, created_at, updated_at
`

type UpdateStudyActivityParams struct {
	ID   int32  `json:"id"`
	Name string `json:"name"`
	Url  string `json:"url"`
}

func (q *Queries) UpdateStudyActivity(ctx context.Context, arg UpdateStudyActivityParams) (StudyActivity, error) {
	row := q.db.QueryRow(ctx, updateStudyActivity, arg.ID, arg.Name, arg.Url)
	var i StudyActivity
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Url,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
