// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: groups.sql

package db

import (
	"context"
)

const addWordToGroup = `-- name: AddWordToGroup :exec
INSERT INTO word_groups (
    word_id,
    group_id
) VALUES (
    $1, $2
)
`

type AddWordToGroupParams struct {
	WordID  int32 `json:"word_id"`
	GroupID int32 `json:"group_id"`
}

func (q *Queries) AddWordToGroup(ctx context.Context, arg AddWordToGroupParams) error {
	_, err := q.db.Exec(ctx, addWordToGroup, arg.WordID, arg.GroupID)
	return err
}

const createGroup = `-- name: CreateGroup :one
INSERT INTO groups (
    name
) VALUES (
    $1
) RETURNING id, name, words_count, created_at, updated_at
`

func (q *Queries) CreateGroup(ctx context.Context, name string) (Group, error) {
	row := q.db.QueryRow(ctx, createGroup, name)
	var i Group
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.WordsCount,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteGroup = `-- name: DeleteGroup :exec
DELETE FROM groups
WHERE id = $1
`

func (q *Queries) DeleteGroup(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteGroup, id)
	return err
}

const getGroup = `-- name: GetGroup :one
SELECT id, name, words_count, created_at, updated_at FROM groups
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetGroup(ctx context.Context, id int32) (Group, error) {
	row := q.db.QueryRow(ctx, getGroup, id)
	var i Group
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.WordsCount,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getGroupsByWord = `-- name: GetGroupsByWord :many
SELECT g.id, g.name, g.words_count, g.created_at, g.updated_at FROM groups g
JOIN word_groups wg ON g.id = wg.group_id
WHERE wg.word_id = $1
ORDER BY g.id
LIMIT $2 OFFSET $3
`

type GetGroupsByWordParams struct {
	WordID int32 `json:"word_id"`
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) GetGroupsByWord(ctx context.Context, arg GetGroupsByWordParams) ([]Group, error) {
	rows, err := q.db.Query(ctx, getGroupsByWord, arg.WordID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Group{}
	for rows.Next() {
		var i Group
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.WordsCount,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listGroups = `-- name: ListGroups :many
SELECT id, name, words_count, created_at, updated_at FROM groups
ORDER BY id
LIMIT $1 OFFSET $2
`

type ListGroupsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListGroups(ctx context.Context, arg ListGroupsParams) ([]Group, error) {
	rows, err := q.db.Query(ctx, listGroups, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Group{}
	for rows.Next() {
		var i Group
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.WordsCount,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const removeWordFromGroup = `-- name: RemoveWordFromGroup :exec
DELETE FROM word_groups
WHERE word_id = $1 AND group_id = $2
`

type RemoveWordFromGroupParams struct {
	WordID  int32 `json:"word_id"`
	GroupID int32 `json:"group_id"`
}

func (q *Queries) RemoveWordFromGroup(ctx context.Context, arg RemoveWordFromGroupParams) error {
	_, err := q.db.Exec(ctx, removeWordFromGroup, arg.WordID, arg.GroupID)
	return err
}

const updateGroup = `-- name: UpdateGroup :one
UPDATE groups
SET 
    name = $2,
    updated_at = CURRENT_TIMESTAMP
WHERE id = $1
RETURNING id, name, words_count, created_at, updated_at
`

type UpdateGroupParams struct {
	ID   int32  `json:"id"`
	Name string `json:"name"`
}

func (q *Queries) UpdateGroup(ctx context.Context, arg UpdateGroupParams) (Group, error) {
	row := q.db.QueryRow(ctx, updateGroup, arg.ID, arg.Name)
	var i Group
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.WordsCount,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
